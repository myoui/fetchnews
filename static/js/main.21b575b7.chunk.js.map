{"version":3,"sources":["sidebar.js","content.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tock","now","Date","setState","time","diff","Math","round","state","init","undefined","timer","setInterval","clearInterval","react_default","a","createElement","className","toLocaleTimeString","Component","NewsLink","Link","to","link","name","NavBar","_Component3","apply","arguments","inherits","createClass","key","value","sidebar_Clock","sidebar_NewsLink","sourcesKey","usnews","worldnews","cnn","bbc","washpost","espn","engadget","News","_Component","fetchArticles","fetch","concat","match","params","source","_api","then","response","json","parseArticles","status","articles","title","map","item","index","error","App","build","sidebar_NavBar","Route","path","component","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","basename","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21b575b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass Clock extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        init: new Date(),\n        time: new Date(),\n        diff: undefined\n      }\n    }\n    \n    componentDidMount() {\n      this.timer = setInterval(this.tock, 1000)\n      this.setState({\n        diff: Math.round((this.state.time - this.state.init)/1000)\n      })    \n    }\n    componentWillUnmount() {\n      clearInterval(this.timer)\n    }\n    tock = () => {\n      const now = new Date()\n      this.setState({\n        time: now,\n        diff: Math.round((now - this.state.init)/1000)\n      })\n    }\n    \n    render() {\n      return (\n        <div className=\"clock\">\n          {this.state.time.toLocaleTimeString()}<br/>\n          {this.state.diff}.\n        </div>\n      )}\n}\n\nclass NewsLink extends Component {\n    render() {\n        return(\n            <div className='selector'>\n                <Link to={this.props.link}>{this.props.name}</Link>\n            </div>)\n    }\n}\n\n\nexport class NavBar extends Component {\n    render() {\n        return (\n            <div className='navBar'>\n                <Clock/>\n                <NewsLink link=\"usnews\" name=\"Top US News\"/>\n                <NewsLink link=\"cnn\" name=\"CNN (USA)\"/>\n                <NewsLink link=\"bbc\" name=\"BBC (UK)\"/>\n                <NewsLink link=\"washpost\" name=\"Washington Post (USA)\"/>\n                <NewsLink link=\"espn\" name=\"ESPN\"/>\n                <NewsLink link=\"engadget\" name=\"Engadget\"/>\n            </div>\n        )\n    }\n}\n\n","import React, { Component } from 'react';\n\nconst sourcesKey = {\n    usnews:\"country=us\",\n    worldnews:\"category=general\",\n    cnn:\"sources=cnn\",\n    bbc:\"sources=bbc-news\",\n    washpost:\"sources=the-washington-post\",\n    espn:\"sources=espn\",\n    engadget:\"sources=engadget\"\n}\n\nexport class News extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            articles: [],\n            status: \"\",\n            error: \"\",\n            time: undefined};\n        this._api = \"81fe8bbe33f64b949474bf94cd180dab\";\n    }\n\n    fetchArticles = () => {\n        fetch(`https://newsapi.org/v2/top-headlines?${sourcesKey[this.props.match.params.source]}&apiKey=${this._api}`).then(\n            response => response.json()).then(\n                json => this.parseArticles(json)\n            )\n    }\n    parseArticles = (json) => {\n        this.setState({status: json.status, articles: json.articles[0].title})\n        const articlesAll = json.articles.map((item, index) => null\n             )\n    }\n\n\n    componentDidMount() {\n        if (this.props.match.params.source) {\n            this.fetchArticles()\n        } else {\n\n        }\n    }\n    componentDidUpdate() {\n        this.fetchArticles()\n    }\n\n    render() {\n        return(\n            <div>\n                <div>articles from {sourcesKey[this.props.match.params.source]}. Status: {this.state.status}</div>\n                <div>{this.state.articles}</div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom'\nimport { Transition } from 'react-spring';\nimport { Row, Column } from 'simple-flexbox';\nimport { NavBar } from \"./sidebar\";\nimport { News } from \"./content\";\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Row>\n        <Column>\n          <NavBar/>\n        </Column>\n        <Column>\n          <Route path=\"/:source\" component={News} />          \n        </Column>\n      </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// TODO : footer, transitions, sources\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<BrowserRouter basename='/fetchnews'>\n    <App />\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}